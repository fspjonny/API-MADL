[tool.poetry]
name = "madl"
version = "0.1.0"
description = "MADL"
authors = ["fspjonny <fabiosilvapedro@yahoo.com.br>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.111.1"
psycopg = {extras = ["binary"], version = "^3.2.1"}
sqlalchemy = "^2.0.31"
pydantic-settings = "^2.4.0"
alembic = "^1.13.2"
pyjwt = "^2.9.0"
pwdlib = {extras = ["argon2"], version = "^0.2.0"}


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.2"
pytest-cov = "^5.0.0"
taskipy = "^1.13.0"
ruff = "^0.5.5"
factory-boy = "^3.3.0"
freezegun = "^1.5.1"
pytest-mock = "^3.14.0"
testcontainers = "^4.7.2"
pytest-asyncio = "^0.23.8"
generate-dockerignore-from-gitignore = "^0.1.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Configurações do RUFF
[tool.ruff]
line-length = 79
extend-exclude = ['migrations']

[tool.ruff.lint]
preview = true
select = ['I', 'F', 'E', 'W', 'PL', 'PT']

[tool.ruff.format]
preview = true
quote-style = 'single'

# Configurações de testes do Pytest
[tool.pytest.ini_options]
pythonpath = "."
addopts = '-p no:warnings'

# Configurações do Taskipy
[tool.taskipy.tasks]
lint = {cmd='ruff check . && ruff check . --diff', help='- Faz um linter no código.'}
format = {cmd='ruff check . --fix && ruff format .', help='- Formata o código corretamente.'}
run = {cmd='fastapi dev madl/app.py', help='- Executa a aplicação.'}
test = {cmd='pytest -s -x --cov=madl -vv', help='- Executas os testes unitários.'}
post-test = {cmd='coverage html && python misc/coverage-report.py', help='- Exibe relatório de cobertura.'}

# Usar em caso de execução dentro de container Docker
run-docker = {cmd='docker-compose up -d', help='- Inicia a aplicação no Docker em segundo plano.'}
